AWSTemplateFormatVersion: '2010-09-09'
Description:
  Lambda Create
# ------------------------------------------------------------#
#  Metadata
# ------------------------------------------------------------#
Metadata:
  "AWS::CloudFormation::Interface":
    ParameterGroups:
      - Label:
          default: "Lambda Configuration"
        Parameters:
        - FunctionName
        - Description
        - Handler
        - MemorySize
        - Runtime
        - Timeout
        - TagsName

# ------------------------------------------------------------#
#  InputParameters
# ------------------------------------------------------------#
Parameters:
  FunctionName:
    Type: String
    Default: "cfn-lmd-inamura"
  Description:
    Type: String
    Default: "cfn-lmd-inamura"
  Handler:
    Type: String
    Default: "index.lambda_handler"
  MemorySize:
    Type: String
    Default: "128"
  Runtime:
    Type: String
    Default: "python3.9"
  Timeout:
    Type: String
    Default: "10"
  TagsName:
    Type: String
    Description: UserName
    Default: "inamura"
# ------------------------------------------------------------#
#  Resources
# ------------------------------------------------------------#
Resources:
# ------------------------------------------------------------#
#  Lambda
# ------------------------------------------------------------#
  Lambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |
          import boto3
          import urllib.parse
          import json
          from boto3.dynamodb.conditions import Key, Attr

          def lambda_handler(event, context):
            print('Loading function')

            dynamodb = boto3.resource('dynamodb')
            table = dynamodb.Table('mailaddress')

            sqs = boto3.resource('sqs')
            queue = sqs.get_queue_by_name(QueueName='cfn-sqs-inamura')
            
            #S3からバケット名・オブジェクトを取得
            for rec in event['Records']:
              bucketname = rec['s3']['bucket']['name']
              filename = rec['s3']['object']['key']
              print(bucket)
              print(filename)
              
              #DynamoDBからhaserror 0 を取得
              response = table.query(
                IndexName='haserror-index',
                KeyConditionExpression=Key('haserror').eq(0)
              )

              #responseからItemを取得しissend 0 に修正
              for item in response['Items']:
                table.update_item(
                  Key={'email' : item['email']},
                  UpdateExpression="set issend=:val",
                  ExpressionAttributeValues= {
                    ':val' : 0
                  }
                )

                #SQSにメッセージとして登録
                sqsresponse = queue.send_message(
                  MessageBody=item['email'],
                  MessageAttributes={
                    'username' : {
                      'DataType' : 'String',
                      'StringValue' : item['username']
                    },
                    'bucketname' : {
                      'DataType' : 'String',
                      'StringValue' : bucketname
                    },
                    'filename' : {
                      'DataType' : 'String',
                      'StringValue' : filename
                    }
                  }
                )
                
                #ログ出力
                print(json.dumps(sqsresponse))

      Description: !Ref Description
      FunctionName: !Ref FunctionName
      Handler: !Ref Handler 
      MemorySize: !Ref MemorySize
      Runtime: !Ref Runtime
      Timeout: !Ref Timeout
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          SNS: !ImportValue cfn-sns-topic-inamura-arn
          TZ: "Asia/Tokyo"
          
      Tags:
        - Key: "User"
          Value: !Ref TagsName

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${FunctionName}-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "sts:AssumeRole"
            Principal:
              Service: lambda.amazonaws.com
      Policies:
        - PolicyName: !Sub "${FunctionName}-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:CreateLogGroup"
                Resource: !Sub "arn:${AWS::Partition}:logs:*:*:*"

              - Effect: "Allow"
                Action:
                  - "sqs:*" 
                Resource: !ImportValue cfn-sqs-inamura-queuearn

              - Effect: "Allow"
                Action:
                  - "s3:*" 
                Resource: "*"

              - Effect: "Allow"
                Action:
                  - "dynamodb:*" 
                Resource: "arn:aws:dynamodb:ap-northeast-1:717076937412:*"

  TriggerLambdaPermission:
      Type: "AWS::Lambda::Permission"
      Properties:
        Action: "lambda:InvokeFunction"
        FunctionName: !GetAtt Lambda.Arn
        Principal: "s3.amazonaws.com"
        SourceArn: !Sub "arn:${AWS::Partition}:s3:::*"
# ------------------------------------------------------------#
# Output Parameters
#------------------------------------------------------------#          
Outputs:
  LambdaArn:
    Value: !GetAtt Lambda.Arn
    Export:
      Name: !Sub "${FunctionName}-arn"
  LambdaName:
    Value: !Ref FunctionName
    Export:
      Name: !Sub "${FunctionName}-name"